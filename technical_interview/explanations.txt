Question 1:
To find the anagram of t present in s, we can try to see if some substring of length s has same characters and their count as t.

Since the order of the characters in t doesn't matter, we can use a dictionary that holds the characters and the counts (An array could possibly be an improvement, since the number of characters are fixed). So, to do this we can create a dictionary of t with the characters and their counts and then compare the dictionary of the substring with it. We need to create a dictionary of t only once.

The first solution that comes to mind is to have an outer loop for s, and extracting substrings of length t from the current position. Then compare the two dictionaries.

Here, the dictionary comparison is using hash function and so average case complexity is O(1)*O(1) and worst case is O(m)*O(m) where m is the size of the hash. Fortunately, the hash length is max 26 (or the number of characters) and is constant. So, complexity is O(1).
But, the extracting substring at each iteration is the most expensive operation.

An improvement can be where we iteratively maintain a dictionary of the substring as we move a sliding window of the substring in s. We can update the hash and decrease the count of character from the hash when we move past it. The cost then becomes O(m) which is O(1) since m is constant.

So the final solution uses a sliding window, maintains a dictionary iteratively and compares it with the dictionary of t with the characters and their counts.
Efficiency: The Average and Worst case complexity is O(len(s)) or O(len(t)) whichever is greater. Space complexity is O(len(s)+len(t)) for the hashes created. So the space complexity is O(len(s)) or O(len(t)), whichever is greater.

Question 2:
One of the features of the palindrome is that the alphabets are mirrors on left and right side. If it's an even length palindrome of length n, then first n/2 characters are the mirrors of next n/2 characters. For an odd length palindrome, i = roof(n/2) is the middle character and characters up to i (not including) on the left are mirrored on the right.
So, we use this property for our optimization.

Our outer loop will iterate through all characters as possible pivot points and check for even and odd length palindromes around it.
For even length, we can count the number of characters to the left (including) that are same as characters on the right.
For odd length, we do the same, but we do not include the pivot character.

If the extracted palindrome using the count of number of characters is longer than the existing longest palindrome, then we have a new longest palindrome.

Efficiency: The inner check around the pivot runs O(n/2) worst case but trims search space fast if palindrome is not present. The outer loop runs O(n). And so the solution is O(n^2). Since we only create the space for max length palindrome, our space complexity is O(n).

Question 3:
We can use Prim's algorithm for getting the minimum spanning tree (MST). The assumption is that all vertices are connected to some other vertex of the graph.
The idea for this algorithm is that we maintain a set of hypotheses of the different vertices that are connected to the vertices in the graph, but are not yet in the tree.
The hypotheses contains a hash map of the vertex and its minimum cost to join to MST, and another hash map of that vertex and the nearest vertex in the MST to it.
We start with one vertex in the MST and the hypotheses generated from the edges that it is connected to.
While there is some vertex yet to be connected to the MST:
i) We explore our hypotheses and pick the vertex with the lowest cost
ii) Add the edge to that vertex with that cost to the MST.
iii) We then use the edges outgoing from this vertex and add the other vertices to the hypotheses if they are not already in the MST.
Efficiency: The complexity for this is O(|V| + |E| log(|V|)), which is O(|E| log(|V|)) as we visit all vertexes only once and worst case consider all edges (but only once). The log(|V|) is the cost of maintaining the hypotheses.
We could have used a heap for the edges and sorted them, but the complexity would have been O(|E| log |E|).
The space complexity is O(|V| + |E|) * O(2 * V), where the first term is for the MST representation, and second term is for the hypotheses. And so, the space complexity is O(|E|*|V|)


Question 4:
We assume that the data is correct for the BST, and all BST constraints are satisfied.
Find the LCA by recursively searching from top to bottom (we use iteration though, not recursion).
  We Start with root as current
  If (n1<=current and n2>=current) then current is the LCA
  If both are less than current, then we find the left child in the matrix and make that current
  If both are greater than current, then we find the right in the matrix child and make that current
  We repeat this till we find the LCA.
Efficiency: Time complexity: In an actual binary tree, with nodes : this would be O(log(n)) average case and O (n) worst case. But as we are moving through an adjacent matrix, there is some cost of finding the left or right child node. The time complexity = O(n * log(n))
Space complexity: Space complexity is O(1) since we are not creating any new data structures.

Question 5:
We have a singly linked list. We assume that we only know the head, and there is no LinkedList class that holds the size when we add to the list. Also, we assume there is no loop.
To reach the m-th node from the end we first traverse to the end and count the nodes to determine the size.
Then we traverse the list the second time, counting till we reach the (size-m)-th node
Efficiency: The time complexity for this is O(2*n)= O(n), since we move through the list twice. Space complexity=O(1) since we are not creating a new list.
